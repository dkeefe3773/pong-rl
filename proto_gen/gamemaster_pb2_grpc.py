# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import gamemaster_pb2 as gamemaster__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class GameMasterStub(object):
  """This service will provide the game state to clients as well as accept paddle input commands
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.stream_game_state = channel.unary_stream(
        '/GameMaster/stream_game_state',
        request_serializer=gamemaster__pb2.PlayerIdentifier.SerializeToString,
        response_deserializer=gamemaster__pb2.GameState.FromString,
        )
    self.register_player = channel.unary_unary(
        '/GameMaster/register_player',
        request_serializer=gamemaster__pb2.PlayerIdentifier.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )
    self.submit_paddle_actions = channel.stream_unary(
        '/GameMaster/submit_paddle_actions',
        request_serializer=gamemaster__pb2.PaddleAction.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )


class GameMasterServicer(object):
  """This service will provide the game state to clients as well as accept paddle input commands
  """

  def stream_game_state(self, request, context):
    """This is a hot stream of game state.  Stream will exhaust when a player loses a match.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def register_player(self, request, context):
    """Let the game engine know that a player has registered to play.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def submit_paddle_actions(self, request_iterator, context):
    """This informs the game engine to move a paddle
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GameMasterServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'stream_game_state': grpc.unary_stream_rpc_method_handler(
          servicer.stream_game_state,
          request_deserializer=gamemaster__pb2.PlayerIdentifier.FromString,
          response_serializer=gamemaster__pb2.GameState.SerializeToString,
      ),
      'register_player': grpc.unary_unary_rpc_method_handler(
          servicer.register_player,
          request_deserializer=gamemaster__pb2.PlayerIdentifier.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
      'submit_paddle_actions': grpc.stream_unary_rpc_method_handler(
          servicer.submit_paddle_actions,
          request_deserializer=gamemaster__pb2.PaddleAction.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'GameMaster', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
